{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","imageUrl","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","image","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.61c8d1f8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\r\n\r\nimport './Map.css';\r\n\r\nconst Map = props => {\r\n  const mapRef = useRef();\r\n  const { center, zoom } = props;\r\n\r\n  useEffect(() => {\r\n    const map = new window.google.maps.Map(mapRef.current, {\r\n      center: center,\r\n      zoom: zoom\r\n    });\r\n\r\n    new window.google.maps.Marker({ position: center, map: map })\r\n  }, [center, zoom])\r\n\r\n\r\n\r\n  return <div\r\n    ref={mapRef}\r\n    className={`map ${props.className}`}\r\n    style={props.style}>\r\n\r\n  </div>\r\n}\r\n\r\nexport default Map; ","import React from 'react';\r\nimport { useState, useContext } from 'react';\r\n\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport Modal from '../../shared/components/UIElements/Modal';\r\nimport Map from '../../shared/components/UIElements/Map';\r\nimport Card from '../../shared/components/UIElements/Card'\r\nimport Button from '../../shared/components/FormElements/Button'\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nimport './PlaceItem.css'\r\n\r\nconst PlaceItem = props => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  const openMapHandler = () => setShowMap(true);\r\n  const closeMapHandler = () => setShowMap(false)\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true);\r\n  }\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false)\r\n  }\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`, 'DELETE', null, {\r\n        Authorization: 'Bearer ' + auth.token\r\n      });\r\n      props.onDelete(props.id)\r\n    } catch (err) { }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Modal\r\n        show={showMap}\r\n        onCancel={closeMapHandler}\r\n        header={props.address}\r\n        contentClass=\"places-item__modal-content\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}>\r\n        <div className=\"map-container\">\r\n          <Map center={props.coordinates} zoom={16} />\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Are you sure?\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={cancelDeleteHandler}>CANCEL</Button>\r\n            <Button danger onClick={confirmDeleteHandler}>DELETE</Button>\r\n          </React.Fragment>\r\n        }>\r\n        <p>Do you want to proceed and delete this place? This action cannot be undone.</p>\r\n      </Modal>\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n          {isLoading && <LoadingSpinner asOverlay />}\r\n          <div className=\"place=item__image\">\r\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${props.imageUrl}`} alt={props.title} />\r\n          </div>\r\n          <div className=\"place-item__info\">\r\n            <h2>{props.title}</h2>\r\n            <h3>{props.address}</h3>\r\n            <p>{props.description}</p>\r\n          </div>\r\n          <div className=\"place-item__actions\">\r\n            <Button inverse onClick={openMapHandler}>VIEW ON MAP</Button>\r\n            {auth.userId === props.creatorId && <Button to={`/places/${props.id}`}>EDIT</Button>}\r\n            {auth.userId === props.creatorId && <Button danger onClick={showDeleteWarningHandler}>DELETE</Button>}\r\n\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default PlaceItem;","import React from 'react';\r\n\r\nimport PlaceItem from './PlaceItem';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Button from '../../shared/components/FormElements/Button'\r\n\r\nimport './PlaceList.css'\r\n\r\nconst PlaceList = props => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No places found. Create one?</h2>\r\n          <Button to=\"/places/new\">Share Place</Button>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return <ul className=\"place-list\">\r\n    {props.items.map(place => (\r\n      <PlaceItem\r\n        key={place.id}\r\n        id={place.id}\r\n        imageUrl={place.image}\r\n        title={place.title}\r\n        description={place.description}\r\n        address={place.address}\r\n        creatorId={place.creator}\r\n        coordinates={place.location}\r\n        onDelete={props.onDeletePlace}\r\n      />\r\n    ))}\r\n  </ul>\r\n}\r\n\r\nexport default PlaceList;","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport PlaceList from '../components/PlaceList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nconst UserPlaces = () => {\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`);\r\n        setLoadedPlaces(responseData.places)\r\n      } catch (err) { }\r\n\r\n\r\n    }\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  const placeDeletedHandler = deletedPlaceId => {\r\n    setLoadedPlaces(prevPlaces => prevPlaces.filter(place => place.id !== deletedPlaceId));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default UserPlaces;"],"sourceRoot":""}